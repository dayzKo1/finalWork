// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int       @id @default(autoincrement())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  name           String?
  email          String    @unique
  hashedPassword String?
  role           String    @default("USER")
  tokens         Token[]
  sessions       Session[]
  Recruits       Recruit[]
  Apply          Apply[]
  Collect        Collect[]
  Resume         Resume[]
  companyKind    String
  companySize    String
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgresql
// enum TokenType {
//   RESET_PASSWORD
// }

model Question {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String
  choices   Choice[]
}

model Choice {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  text       String
  votes      Int      @default(0)
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
}

model Recruit {
  id          Int       @id @default(autoincrement())
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User?     @relation(fields: [userId], references: [id])
  userId      Int?
  Apply       Apply[]
  collect     Collect[]
  salaryMax   String?
  salaryMin   String?
  description String
  detail      String
  city        String
  year        String
  educ        String
  type        String
  avai        String
}

// 申请
model Apply {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  recruit   Recruit? @relation(fields: [recruitId], references: [id])
  recruitId Int?
  status    Boolean  @default(true)
}

// 收藏
model Collect {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  recruit   Recruit? @relation(fields: [recruitId], references: [id])
  recruitId Int?
}

// 简历
model Resume {
  id          Int      @id @default(autoincrement())
  user        User?    @relation(fields: [userId], references: [id])
  userId      Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  gender      String // 性别
  age         String // 年龄
  status      String // 求职状态
  prefer      String // 求职意向
  advance     String // 个人优势
  works       String // 个人作品
  educExp     Educ[] // 教育经历
  inteExp     Inte[] // 工作/实习经历
  projExp     Proj[] // 项目经历
  studExp     Stud[] // 学生干部经历
  language    Lang[] // 语言能力
  skills      Skil[] // 专业技能
  certificate Cert[] // 证书
}

model Educ {
  id       Int    @id @default(autoincrement())
  content  String
  Resume   Resume @relation(fields: [ResumeId], references: [id])
  ResumeId Int
}

model Inte {
  id       Int    @id @default(autoincrement())
  content  String
  Resume   Resume @relation(fields: [ResumeId], references: [id])
  ResumeId Int
}

model Proj {
  id       Int    @id @default(autoincrement())
  content  String
  Resume   Resume @relation(fields: [ResumeId], references: [id])
  ResumeId Int
}

model Stud {
  id       Int    @id @default(autoincrement())
  content  String
  Resume   Resume @relation(fields: [ResumeId], references: [id])
  ResumeId Int
}

model Lang {
  id       Int    @id @default(autoincrement())
  content  String
  Resume   Resume @relation(fields: [ResumeId], references: [id])
  ResumeId Int
}

model Skil {
  id       Int    @id @default(autoincrement())
  content  String
  Resume   Resume @relation(fields: [ResumeId], references: [id])
  ResumeId Int
}

model Cert {
  id       Int    @id @default(autoincrement())
  content  String
  Resume   Resume @relation(fields: [ResumeId], references: [id])
  ResumeId Int
}
